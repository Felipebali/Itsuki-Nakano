// rpg-nk-ia.js - SISTEMA RPG COMPLETO ITSUNI-NK
let handler = async (m, { conn, text, usedPrefix, command, isOwner, mentionedJid }) => {
    const ctxErr = global.rcanalx || {}
    const ctxWarn = global.rcanalw || {}
    const ctxOk = global.rcanalr || {}

    // INICIALIZAR SISTEMA RPG
    if (!global.nkRPG) {
        global.nkRPG = {
            users: {},
            batallas: {},
            misiones: {},
            recompensas: {},
            razas: {
                'Humano': { 
                    vida: 10, ataque: 8, defensa: 7, energia: 6,
                    habilidad: 'Adaptabilidad - +10% EXP en todas las actividades'
                },
                'Elfo': { 
                    vida: 7, ataque: 9, defensa: 6, energia: 9,
                    habilidad: 'Precisi√≥n √âlfica - +15% de da√±o cr√≠tico'
                },
                'Mago': { 
                    vida: 6, ataque: 12, defensa: 5, energia: 10,
                    habilidad: 'Poder Arcano - +20% de da√±o m√°gico'
                },
                'Brujo': { 
                    vida: 8, ataque: 10, defensa: 8, energia: 8,
                    habilidad: 'Alquimia Oscura - +15% de vida al usar pociones'
                },
                'Demonio': { 
                    vida: 12, ataque: 11, defensa: 9, energia: 7,
                    habilidad: 'Furia Infernal - +25% de da√±o cuando vida < 30%'
                }
            },
            objetos: {
                armas: {
                    'Espada B√°sica': { ataque: 15, precio: 100, tipo: 'fisica' },
                    'Bast√≥n M√°gico': { ataque: 25, precio: 300, tipo: 'magica' },
                    'Arco de Itsuki': { ataque: 35, precio: 500, tipo: 'fisica' },
                    'Grimorio Oscuro': { ataque: 40, precio: 700, tipo: 'magica' },
                    'Guada√±a Demon√≠aca': { ataque: 45, precio: 900, tipo: 'demon√≠aca' }
                },
                armaduras: {
                    'T√∫nica B√°sica': { defensa: 10, precio: 80 },
                    'Armadura de Acero': { defensa: 20, precio: 250 },
                    'Manto de Itsuki': { defensa: 30, precio: 400 },
                    'T√∫nica √âlfica': { defensa: 25, precio: 350 },
                    'Armadura Demon√≠aca': { defensa: 35, precio: 600 }
                },
                consumibles: {
                    'Poci√≥n de Vida': { vida: 50, precio: 50 },
                    'Poci√≥n de Energ√≠a': { energia: 30, precio: 40 },
                    'Onigiri M√°gico': { vida: 100, energia: 50, precio: 100 },
                    'Elixir de Fuerza': { ataque: 10, duracion: 3, precio: 150 },
                    'Poci√≥n de Defensa': { defensa: 8, duracion: 3, precio: 120 }
                }
            }
        }
    }

    // INICIALIZAR USUARIO
    if (!global.nkRPG.users[m.sender]) {
        global.nkRPG.users[m.sender] = {
            // PROGRESI√ìN
            nivel: 1,
            exp: 0,
            expNecesaria: 100,
            puntos: 0,

            // RAZA Y CLASE
            raza: 'Humano',
            clase: 'Novato',
            titulo: 'Estudiante Primerizo',

            // STATS BASE
            stats: {
                vida: 100,
                vidaMax: 100,
                energia: 50,
                energiaMax: 50,
                ataque: 10,
                defensa: 10,
                velocidad: 5
            },

            // EQUIPAMIENTO
            equipo: {
                arma: null,
                armadura: null
            },

            // INVENTARIO
            inventario: {
                'Poci√≥n de Vida': 3,
                'Poci√≥n de Energ√≠a': 2
            },

            // BATALLAS
            victorias: 0,
            derrotas: 0,
            misionesCompletadas: 0,

            // ECONOM√çA
            coin: 1000,

            // RECOMPENSAS
            recompensasRecibidas: [],
            ultimaRecompensa: 0
        }
    }

    const user = global.nkRPG.users[m.sender]
    const userName = conn.getName(m.sender) || 'Aventurero'
    const args = text ? text.split(' ') : []
    const subCommand = args[0]?.toLowerCase()

    // üéØ COMANDO PRINCIPAL: nkrpg
    if (!subCommand) {
        return mostrarMenuPrincipal()
    }

    // üìä PERFIL RPG
    if (subCommand === 'perfil' || subCommand === 'profile') {
        return mostrarPerfil()
    }

    // ‚öîÔ∏è BATALLA PVP
    if (subCommand === 'batalla' || subCommand === 'battle') {
        return iniciarBatalla()
    }

    // üéí INVENTARIO
    if (subCommand === 'inventario' || subCommand === 'inventory') {
        return mostrarInventario()
    }

    // üè™ TIENDA
    if (subCommand === 'tienda' || subCommand === 'shop') {
        return mostrarTienda()
    }

    // üìú MISIONES
    if (subCommand === 'misiones' || subCommand === 'quests') {
        return mostrarMisiones()
    }

    // üéÆ ENTRENAR
    if (subCommand === 'entrenar' || subCommand === 'train') {
        return entrenar()
    }

    // üë§ RAZAS
    if (subCommand === 'razas' || subCommand === 'races') {
        return mostrarRazas()
    }

    // üéÅ RECOMPENSA
    if (subCommand === 'recompensa' || subCommand === 'reward') {
        return reclamarRecompensa()
    }

    // FUNCIONES PRINCIPALES
    async function mostrarMenuPrincipal() {
        const progreso = Math.min((user.exp / user.expNecesaria) * 100, 100)
        const barra = '‚ñà'.repeat(Math.floor(progreso / 10)) + '‚ñë'.repeat(10 - Math.floor(progreso / 10))

        const menu = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üëë ùêíùêàùêíùêìùêÑùêåùêÄ ùêçùêä-ùêàùêÄ ùêëùêèùêÜ üî• „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üë§ *Aventurero:* ${userName}
‚îÇ üß¨ *Raza:* ${user.raza} | ${user.clase}
‚îÇ ‚≠ê *Nivel:* ${user.nivel} 
‚îÇ üìä *EXP:* [${barra}] ${progreso.toFixed(1)}%
‚îÇ üè∑Ô∏è *T√≠tulo:* ${user.titulo}
‚îÇ 
‚îÇ ‚ù§Ô∏è *Vida:* ${user.stats.vida}/${user.stats.vidaMax}
‚îÇ ‚ö° *Energ√≠a:* ${user.stats.energia}/${user.stats.energiaMax}
‚îÇ üó°Ô∏è *Ataque:* ${user.stats.ataque}
‚îÇ üõ°Ô∏è *Defensa:* ${user.stats.defensa}
‚îÇ 
‚îÇ ‚öîÔ∏è  *Batallas:* ${user.victorias}üèÜ ${user.derrotas}üíÄ
‚îÇ üìú *Misiones:* ${user.misionesCompletadas}
‚îÇ üí∞ *Yenes:* ${user.coin}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

üéÆ *ùêÇùêéùêåùêÄùêçùêÉùêéùêí ùêÉùêàùêíùêèùêéùêçùêàùêÅùêãùêÑùêí:*

‚öîÔ∏è *Batalla:* 
‚Ä¢ ${usedPrefix}nkrpg batalla @usuario

üìä *Perfil:*
‚Ä¢ ${usedPrefix}nkrpg perfil

üéí *Inventario:*
‚Ä¢ ${usedPrefix}nkrpg inventario

üè™ *Tienda:*
‚Ä¢ ${usedPrefix}nkrpg tienda

üìú *Misiones:*
‚Ä¢ ${usedPrefix}nkrpg misiones

üß¨ *Razas:*
‚Ä¢ ${usedPrefix}nkrpg razas

üéÅ *Recompensa:*
‚Ä¢ ${usedPrefix}nkrpg recompensa

üéØ *Entrenar:*
‚Ä¢ ${usedPrefix}nkrpg entrenar

‚öîÔ∏è *¬°Itsuki te guiar√° en esta aventura!* ‚ú®Ô∏è`

        return conn.reply(m.chat, menu, m, ctxOk)
    }

    async function mostrarPerfil() {
        const armamento = user.equipo.arma ? `üó°Ô∏è ${user.equipo.arma}` : 'Sin arma'
        const proteccion = user.equipo.armadura ? `üõ°Ô∏è ${user.equipo.armadura}` : 'Sin armadura'
        const razaInfo = global.nkRPG.razas[user.raza]

        const perfil = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üìã ùêèùêÑùêëùêÖùêàùêã ùêçùêä-ùêàùêÄ ‚öîÔ∏è „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üë§ *Aventurero:* ${userName}
‚îÇ üß¨ *Raza:* ${user.raza}
‚îÇ ‚≠ê *Nivel:* ${user.nivel}
‚îÇ üìä *EXP:* ${user.exp}/${user.expNecesaria}
‚îÇ üéØ *Clase:* ${user.clase}
‚îÇ üè∑Ô∏è *T√≠tulo:* ${user.titulo}
‚îÇ 
‚îÇ üí´ *HABILIDAD:* ${razaInfo.habilidad}
‚îÇ 
‚îÇ ‚öîÔ∏è *EQUIPAMIENTO:*
‚îÇ ${armamento}
‚îÇ ${proteccion}
‚îÇ 
‚îÇ ‚ù§Ô∏è *VIDA:* ${user.stats.vida}/${user.stats.vidaMax}
‚îÇ ‚ö° *ENERG√çA:* ${user.stats.energia}/${user.stats.energiaMax}
‚îÇ üó°Ô∏è *ATAQUE:* ${user.stats.ataque}
‚îÇ üõ°Ô∏è *DEFENSA:* ${user.stats.defensa}
‚îÇ üèÉ *VELOCIDAD:* ${user.stats.velocidad}
‚îÇ 
‚îÇ üìà *PUNTOS DISPONIBLES:* ${user.puntos}
‚îÇ üí∞ *YENES:* ${user.coin}
‚îÇ 
‚îÇ ‚öîÔ∏è *R√âCORD:* ${user.victorias}üèÜ ${user.derrotas}üíÄ
‚îÇ üìú *MISIONES:* ${user.misionesCompletadas}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

üí° *Usa:* ${usedPrefix}nkrpg entrenar
*Para mejorar tus stats*`

        return conn.reply(m.chat, perfil, m, ctxOk)
    }

    async function mostrarRazas() {
        const razas = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üß¨ ùêíùêÑùêãùêÑùêÇùêÇùêàùêéùêç ùêÉùêÑ ùêëùêÄùêôùêÄùêí üí´ „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üë§ *Jugador:* ${userName}
‚îÇ 
‚îÇ üß¨ *RAZAS DISPONIBLES:*
‚îÇ 
‚îÇ üë® *HUMANO:*
‚îÇ ‚ù§Ô∏è Vida: +10 | üó°Ô∏è Ataque: +8
‚îÇ üõ°Ô∏è Defensa: +7 | ‚ö° Energ√≠a: +6
‚îÇ üí´ *Habilidad:* Adaptabilidad
‚îÇ üìà +10% EXP en todas las actividades
‚îÇ 
‚îÇ üßù *ELFO:*
‚îÇ ‚ù§Ô∏è Vida: +7 | üó°Ô∏è Ataque: +9
‚îÇ üõ°Ô∏è Defensa: +6 | ‚ö° Energ√≠a: +9
‚îÇ üí´ *Habilidad:* Precisi√≥n √âlfica
‚îÇ üéØ +15% de da√±o cr√≠tico
‚îÇ 
‚îÇ üîÆ *MAGO:*
‚îÇ ‚ù§Ô∏è Vida: +6 | üó°Ô∏è Ataque: +12
‚îÇ üõ°Ô∏è Defensa: +5 | ‚ö° Energ√≠a: +10
‚îÇ üí´ *Habilidad:* Poder Arcano
‚îÇ ‚ú® +20% de da√±o m√°gico
‚îÇ 
‚îÇ üßô *BRUJO:*
‚îÇ ‚ù§Ô∏è Vida: +8 | üó°Ô∏è Ataque: +10
‚îÇ üõ°Ô∏è Defensa: +8 | ‚ö° Energ√≠a: +8
‚îÇ üí´ *Habilidad:* Alquimia Oscura
‚îÇ üß™ +15% de vida al usar pociones
‚îÇ 
‚îÇ üòà *DEMONIO:*
‚îÇ ‚ù§Ô∏è Vida: +12 | üó°Ô∏è Ataque: +11
‚îÇ üõ°Ô∏è Defensa: +9 | ‚ö° Energ√≠a: +7
‚îÇ üí´ *Habilidad:* Furia Infernal
‚îÇ üî• +25% de da√±o cuando vida < 30%
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

üìù *Usa:* ${usedPrefix}elegirraza <nombre>
*Para elegir tu raza*`

        return conn.reply(m.chat, razas, m, ctxOk)
    }

    async function reclamarRecompensa() {
        const ahora = Date.now()
        const ultimaRecompensa = user.ultimaRecompensa || 0
        const tiempoEspera = 24 * 60 * 60 * 1000 // 24 horas

        if (ahora - ultimaRecompensa < tiempoEspera) {
            const tiempoRestante = tiempoEspera - (ahora - ultimaRecompensa)
            const horasRestantes = Math.floor(tiempoRestante / (60 * 60 * 1000))
            const minutosRestantes = Math.floor((tiempoRestante % (60 * 60 * 1000)) / (60 * 1000))

            return conn.reply(m.chat,
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üéÅ ùêëùêÑùêÇùêéùêåùêèùêÑùêçùêíùêÄ ùêÉùêàùêÄùêëùêàùêÄ üéÅ „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ ‚ùå *Ya reclamaste tu recompensa hoy*
‚îÇ 
‚îÇ ‚è∞ *Tiempo restante:*
‚îÇ ${horasRestantes} horas ${minutosRestantes} minutos
‚îÇ 
‚îÇ üí° *Vuelve ma√±ana para recibir:*
‚îÇ ‚Ä¢ Monedas aleatorias
‚îÇ ‚Ä¢ EXP extra
‚îÇ ‚Ä¢ Objetos especiales
‚îÇ ‚Ä¢ Pociones de energ√≠a
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£`, m, ctxWarn)
        }

        // Generar recompensa aleatoria
        const recompensas = [
            { tipo: 'coin', cantidad: Math.floor(Math.random() * 200) + 100, nombre: 'Yenes' },
            { tipo: 'exp', cantidad: Math.floor(Math.random() * 50) + 30, nombre: 'EXP' },
            { tipo: 'objeto', cantidad: 1, nombre: 'Poci√≥n de Vida' },
            { tipo: 'objeto', cantidad: 1, nombre: 'Poci√≥n de Energ√≠a' },
            { tipo: 'coin', cantidad: Math.floor(Math.random() * 300) + 150, nombre: 'Yenes' }
        ]

        const recompensa = recompensas[Math.floor(Math.random() * recompensas.length)]
        
        // Aplicar recompensa
        let mensajeRecompensa = ''
        switch (recompensa.tipo) {
            case 'coin':
                user.coin += recompensa.cantidad
                mensajeRecompensa = `üí∞ *${recompensa.cantidad} ${recompensa.nombre}*`
                break
            case 'exp':
                user.exp += recompensa.cantidad
                mensajeRecompensa = `‚≠ê *${recompensa.cantidad} ${recompensa.nombre}*`
                break
            case 'objeto':
                if (!user.inventario[recompensa.nombre]) {
                    user.inventario[recompensa.nombre] = 0
                }
                user.inventario[recompensa.nombre] += recompensa.cantidad
                mensajeRecompensa = `üéÅ *${recompensa.nombre} x${recompensa.cantidad}*`
                break
        }

        // Bonus por raza
        let bonus = ''
        if (user.raza === 'Humano') {
            const bonusExp = Math.floor(recompensa.cantidad * 0.1)
            user.exp += bonusExp
            bonus = `\n‚îÇ üß¨ *Bonus Humano:* +${bonusExp} EXP`
        }

        user.ultimaRecompensa = ahora
        user.recompensasRecibidas.push({
            tipo: recompensa.tipo,
            cantidad: recompensa.cantidad,
            fecha: ahora
        })

        await verificarNivel(user)

        const recompensaMsg = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üéÅ ùêëùêÑùêÇùêéùêåùêèùêÑùêçùêíùêÄ ùêÉùêàùêÄùêëùêàùêÄ üéÅ „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üë§ *Jugador:* ${userName}
‚îÇ üß¨ *Raza:* ${user.raza}
‚îÇ 
‚îÇ üéä *¬°RECOMPENSA RECIBIDA!*
‚îÇ ${mensajeRecompensa}${bonus}
‚îÇ 
‚îÇ üì¶ *INVENTARIO ACTUAL:*
‚îÇ üí∞ Yenes: ${user.coin}
‚îÇ ‚≠ê EXP: ${user.exp}/${user.expNecesaria}
‚îÇ üéí Objetos: ${Object.keys(user.inventario).length}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

ü§ó *¬°Vuelve ma√±ana por m√°s recompensas!* ‚ú®Ô∏è`

        return conn.reply(m.chat, recompensaMsg, m, ctxOk)
    }

    async function iniciarBatalla() {
        const mencionado = m.mentionedJid?.[0]

        if (!mencionado) {
            return conn.reply(m.chat,
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üõ° ùêÅùêÄùêìùêÄùêãùêãùêÄ ùêèùêïùêè ‚öîÔ∏è „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ ‚ùå *Debes mencionar a un jugador*
‚îÇ 
‚îÇ üìù *Uso:*
‚îÇ ${usedPrefix}nkrpg batalla @usuario
‚îÇ 
‚îÇ üí° *Ejemplo:*
‚îÇ ${usedPrefix}nkrpg batalla @${m.sender.split('@')[0]}
‚îÇ 
‚îÇ ‚ö†Ô∏è *Requisitos:*
‚îÇ ‚Ä¢ Ambos deben tener energ√≠a
‚îÇ ‚Ä¢ No puedes batallar contigo mismo
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£`,
            m, ctxWarn)
        }

        if (mencionado === m.sender) {
            return conn.reply(m.chat, '‚ùå *No puedes batallar contra ti mismo*', m, ctxErr)
        }

        // Verificar si el objetivo existe en el RPG
        if (!global.nkRPG.users[mencionado]) {
            return conn.reply(m.chat, '‚ùå *El usuario mencionado no est√° registrado en el RPG*', m, ctxErr)
        }

        const objetivo = global.nkRPG.users[mencionado]
        const nombreObjetivo = conn.getName(mencionado) || 'Oponente'

        // Verificar energ√≠a
        if (user.stats.energia < 10) {
            return conn.reply(m.chat, '‚ùå *No tienes suficiente energ√≠a para batallar*', m, ctxErr)
        }

        if (objetivo.stats.energia < 10) {
            return conn.reply(m.chat, `‚ùå *${nombreObjetivo} no tiene suficiente energ√≠a*`, m, ctxErr)
        }

        // Iniciar batalla
        user.stats.energia -= 10
        objetivo.stats.energia -= 10

        // Calcular da√±o con bonus de raza
        let da√±oJugador = Math.max(1, user.stats.ataque - objetivo.stats.defensa / 2)
        let da√±oObjetivo = Math.max(1, objetivo.stats.ataque - user.stats.defensa / 2)

        // Aplicar habilidades de raza
        if (user.raza === 'Elfo' && Math.random() < 0.15) {
            da√±oJugador = Math.floor(da√±oJugador * 1.15)
        }
        if (objetivo.raza === 'Elfo' && Math.random() < 0.15) {
            da√±oObjetivo = Math.floor(da√±oObjetivo * 1.15)
        }

        // Determinar ganador
        let ganador = user
        let perdedor = objetivo
        let nombreGanador = userName
        let nombrePerdedor = nombreObjetivo

        if (Math.random() < 0.4) { // 40% de chance para el objetivo
            ganador = objetivo
            perdedor = user
            nombreGanador = nombreObjetivo
            nombrePerdedor = userName
        }

        // Actualizar records
        ganador.victorias++
        perdedor.derrotas++

        // Recompensas
        const expGanada = 25
        const yenesGanados = 50

        ganador.exp += expGanada
        user.exp += expGanada // Ambos ganan EXP
        ganador.coin += yenesGanados

        // Bonus de humano
        if (user.raza === 'Humano') {
            user.exp += Math.floor(expGanada * 0.1)
        }
        if (objetivo.raza === 'Humano') {
            objetivo.exp += Math.floor(expGanada * 0.1)
        }

        // Verificar subida de nivel
        await verificarNivel(ganador)
        await verificarNivel(user)

        const resultadoBatalla = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî ‚öîÔ∏è ùêÅùêÄùêìùêÄùêãùêãùêÄ ùêÖùêàùêçùêÄùêãùêàùêôùêÄùêÉùêÄ üó° „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ ‚öîÔ∏è *COMBATIENTES:*
‚îÇ üéØ ${userName} (${user.raza}) vs ${nombreObjetivo} (${objetivo.raza})
‚îÇ 
‚îÇ üí• *DA√ëOS:*
‚îÇ üó°Ô∏è ${userName}: ${da√±oJugador} de da√±o
‚îÇ üó°Ô∏è ${nombreObjetivo}: ${da√±oObjetivo} de da√±o
‚îÇ 
‚îÇ üèÜ *GANADOR:* ${nombreGanador}
‚îÇ üíÄ *PERDEDOR:* ${nombrePerdedor}
‚îÇ 
‚îÇ üéÅ *RECOMPENSAS:*
‚îÇ ‚≠ê EXP: +${expGanada} para ambos
‚îÇ üí∞ Yenes: +${yenesGanados} para ${nombreGanador}
‚îÇ ‚ö° Energ√≠a: -10 para ambos
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

ü§ó *¬°Batalla √©pica finalizada!* ‚ú®Ô∏è`

        return conn.reply(m.chat, resultadoBatalla, m, ctxOk)
    }

    async function mostrarInventario() {
        let inventarioTexto = 'üéí *INVENTARIO VAC√çO*'

        const items = Object.entries(user.inventario).filter(([_, cantidad]) => cantidad > 0)
        if (items.length > 0) {
            inventarioTexto = items.map(([item, cantidad]) => 
                `‚Ä¢ ${item} x${cantidad}`
            ).join('\n')
        }

        const inventario = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üéí ùêàùêçùêïùêÑùêçùêìùêÄùêëùêàùêé üéí „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üë§ *Jugador:* ${userName}
‚îÇ üß¨ *Raza:* ${user.raza}
‚îÇ 
‚îÇ üì¶ *OBJETOS:*
‚îÇ ${inventarioTexto}
‚îÇ 
‚îÇ ‚öîÔ∏è *EQUIPADO:*
‚îÇ üó°Ô∏è Arma: ${user.equipo.arma || 'Ninguna'}
‚îÇ üõ°Ô∏è Armadura: ${user.equipo.armadura || 'Ninguna'}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

üí° *Usa:* ${usedPrefix}nkrpg tienda
*Para comprar objetos*`

        return conn.reply(m.chat, inventario, m, ctxOk)
    }

    async function mostrarTienda() {
        const tienda = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üè™ ùêìùêàùêÑùêçùêÉùêÄ ùêçùêä-ùêàùêÄ üè™ „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üë§ *Jugador:* ${userName}
‚îÇ üß¨ *Raza:* ${user.raza}
‚îÇ üí∞ *Yenes:* ${user.coin || 0}
‚îÇ 
‚îÇ ‚öîÔ∏è *ARMAS:*
${Object.entries(global.nkRPG.objetos.armas).map(([nombre, stats]) => 
    `‚îÇ üó°Ô∏è ${nombre} - Ataque: ${stats.ataque} | Tipo: ${stats.tipo} | Precio: ${stats.precio}¬•`
).join('\n')}
‚îÇ 
‚îÇ üõ°Ô∏è *ARMADURAS:*
${Object.entries(global.nkRPG.objetos.armaduras).map(([nombre, stats]) => 
    `‚îÇ üõ°Ô∏è ${nombre} - Defensa: ${stats.defensa} | Precio: ${stats.precio}¬•`
).join('\n')}
‚îÇ 
‚îÇ üß™ *CONSUMIBLES:*
${Object.entries(global.nkRPG.objetos.consumibles).map(([nombre, stats]) => 
    `‚îÇ üß™ ${nombre} - Vida: +${stats.vida || 0} | Energ√≠a: +${stats.energia || 0} | Precio: ${stats.precio}¬•`
).join('\n')}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

üí° *Usa:* ${usedPrefix}comprar <objeto>
*Para comprar objetos*`

        return conn.reply(m.chat, tienda, m, ctxOk)
    }

    async function mostrarMisiones() {
        const misiones = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üéØ ùêåùêàùêíùêàùêéùêçùêÑùêí üéØ „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üë§ *Aventurero:* ${userName}
‚îÇ üß¨ *Raza:* ${user.raza}
‚îÇ üìú *Completadas:* ${user.misionesCompletadas}
‚îÇ 
‚îÇ üéØ *MISIONES DISPONIBLES:*
‚îÇ 
‚îÇ üåü *Misi√≥n Diaria:*
‚îÇ ‚Ä¢ Batallar 3 veces
‚îÇ ‚Ä¢ Recompensa: 100 EXP, 50¬•
‚îÇ 
‚îÇ ‚öîÔ∏è *Misi√≥n de Combate:*
‚îÇ ‚Ä¢ Ganar 5 batallas
‚îÇ ‚Ä¢ Recompensa: 200 EXP, 100¬•
‚îÇ 
‚îÇ üìà *Misi√≥n de Nivel:*
‚îÇ ‚Ä¢ Alcanzar nivel 10
‚îÇ ‚Ä¢ Recompensa: 500 EXP, Arma especial
‚îÇ 
‚îÇ üé™ *Misi√≥n Especial:*
‚îÇ ‚Ä¢ Completar todas las misiones diarias
‚îÇ ‚Ä¢ Recompensa: T√≠tulo exclusivo
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

ü§ó *¬°Itsuki tiene misiones especiales para ti!* ‚ú®Ô∏è`

        return conn.reply(m.chat, misiones, m, ctxOk)
    }

    async function entrenar() {
        if (user.stats.energia < 5) {
            return conn.reply(m.chat, '‚ùå *No tienes suficiente energ√≠a para entrenar*', m, ctxErr)
        }

        user.stats.energia -= 5
        let expGanada = 10 + Math.floor(Math.random() * 10)

        // Bonus de humano
        if (user.raza === 'Humano') {
            expGanada = Math.floor(expGanada * 1.1)
        }

        user.exp += expGanada

        // Posibilidad de ganar puntos de stat
        let mensajeExtra = ''
        if (Math.random() < 0.3) { // 30% de chance
            user.puntos += 1
            mensajeExtra = '\nüéÅ *¬°+1 Punto de Stat!*'
        }

        await verificarNivel(user)

        const entrenamiento = 
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî ‚ö°Ô∏è ùêÑùêçùêìùêëùêÑùêçùêÄùêåùêàùêÑùêçùêìùêé ‚ö°Ô∏è „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üë§ *Entrenando:* ${userName}
‚îÇ üß¨ *Raza:* ${user.raza}
‚îÇ 
‚îÇ üìà *RESULTADOS:*
‚îÇ ‚≠ê EXP: +${expGanada}
‚îÇ ‚ö° Energ√≠a: -5
‚îÇ ${mensajeExtra}
‚îÇ 
‚îÇ üìä *PROGRESO:*
‚îÇ Nivel: ${user.nivel}
‚îÇ EXP: ${user.exp}/${user.expNecesaria}
‚îÇ Puntos: ${user.puntos}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£

ü§ó *¬°Itsuki est√° orgullosa de tu dedicaci√≥n!* ‚ú®Ô∏è`

        return conn.reply(m.chat, entrenamiento, m, ctxOk)
    }

    // FUNCI√ìN AUXILIAR: Verificar nivel
    async function verificarNivel(jugador) {
        while (jugador.exp >= jugador.expNecesaria) {
            jugador.exp -= jugador.expNecesaria
            jugador.nivel++
            jugador.expNecesaria = Math.floor(jugador.expNecesaria * 1.5)
            jugador.puntos += 2

            // Mejorar stats al subir de nivel
            jugador.stats.vidaMax += 10
            jugador.stats.energiaMax += 5
            jugador.stats.ataque += 2
            jugador.stats.defensa += 1

            // Restaurar stats
            jugador.stats.vida = jugador.stats.vidaMax
            jugador.stats.energia = jugador.stats.energiaMax

            // Actualizar clase y t√≠tulo
            if (jugador.nivel >= 10) jugador.clase = 'Experto'
            if (jugador.nivel >= 25) jugador.clase = 'Maestro'
            if (jugador.nivel >= 50) jugador.clase = 'Leyenda'
        }
    }

}

// Comando para elegir raza
let handler2 = async (m, { conn, text }) => {
    const user = global.nkRPG.users[m.sender]
    if (!user) {
        return conn.reply(m.chat, '‚ùå *Primero debes registrarte en el RPG con* `' + usedPrefix + 'nkrpg`', m)
    }

    if (user.nivel > 1) {
        return conn.reply(m.chat, '‚ùå *Solo puedes elegir raza en nivel 1*', m)
    }

    const raza = text?.toLowerCase()
    const razasDisponibles = {
        'humano': 'Humano',
        'elfo': 'Elfo', 
        'mago': 'Mago',
        'brujo': 'Brujo',
        'demonio': 'Demonio'
    }

    if (!raza || !razasDisponibles[raza]) {
        return conn.reply(m.chat,
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üß¨ ùêÑùêãùêÑùêÜùêàùêë ùêëùêÄùêôùêÄ üí´ „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ ‚ùå *Debes especificar una raza v√°lida*
‚îÇ 
‚îÇ üìù *Uso:*
‚îÇ ${usedPrefix}elegirraza <raza>
‚îÇ 
‚îÇ üéØ *Razas disponibles:*
‚îÇ ‚Ä¢ humano üßë
‚îÇ ‚Ä¢ elfo üßù
‚îÇ ‚Ä¢ mago üîÆ
‚îÇ ‚Ä¢ brujo üßô
‚îÇ ‚Ä¢ demonio üòà
‚îÇ 
‚îÇ üí° *Solo disponible en nivel 1*
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£`, m)
    }

    const razaElegida = razasDisponibles[raza]
    const statsRaza = global.nkRPG.razas[razaElegida]

    // Aplicar stats de la raza
    user.raza = razaElegida
    user.stats.vidaMax += statsRaza.vida
    user.stats.vida = user.stats.vidaMax
    user.stats.ataque += statsRaza.ataque
    user.stats.defensa += statsRaza.defensa
    user.stats.energiaMax += statsRaza.energia
    user.stats.energia = user.stats.energiaMax

    conn.reply(m.chat,
`‚ï≠‚îÅ‚îÅ‚îÅ„Äî üß¨ ùêëùêÄùêôùêÄ ùêÑùêãùêÑùêÜùêàùêÉùêÄ üí´ „Äï‚îÅ‚îÅ‚îÅ‚¨£
‚îÇ üéâ *¬°Felicidades!*
‚îÇ üß¨ *Raza seleccionada:* ${razaElegida}
‚îÇ 
‚îÇ üìä *BONUS DE RAZA:*
‚îÇ ‚ù§Ô∏è Vida: +${statsRaza.vida}
‚îÇ üó°Ô∏è Ataque: +${statsRaza.ataque}
‚îÇ üõ°Ô∏è Defensa: +${statsRaza.defensa}
‚îÇ ‚ö° Energ√≠a: +${statsRaza.energia}
‚îÇ 
‚îÇ üí´ *HABILIDAD ESPECIAL:*
‚îÇ ${statsRaza.habilidad}
‚îÇ 
‚îÇ üéØ *¬°Comienza tu aventura!*
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£`, m)
}

handler.help = ['nkrpg [opci√≥n]', 'elegirraza <raza>', 'comprar <objeto>', 'unirseclan <nombre>']
handler.tags = ['rpg']
handler.command = ['nkrpg', 'rpgitsuki', 'nkia', 'elegirraza', 'selectrace', 'comprar', 'buy', 'unirseclan', 'joinclan']
handler.register = true

export default handler