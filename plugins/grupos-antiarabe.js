let handler = async (m, { conn, args, usedPrefix, command, isAdmin, isBotAdmin }) => {
  const ctxErr = (global.rcanalx || {})
  const ctxWarn = (global.rcanalw || {})
  const ctxOk = (global.rcanalr || {})

  // Verificar si es un comando de configuraci√≥n
  if (['antiarabe', 'antiarab', 'antiarabes'].includes(command)) {
    if (!m.isGroup) return conn.reply(m.chat, 'üçô ‚ùå Este comando solo funciona en grupos.', m, ctxErr)
    if (!isAdmin) return conn.reply(m.chat, 'üìö ‚ö†Ô∏è Necesitas ser administrador para configurar el anti√°rabe.', m, ctxErr)

    const action = args[0]?.toLowerCase()

    if (!action) {
      return conn.reply(m.chat, `
üõ°Ô∏è **Sistema Anti-√Årabe** üá∏üá¶üö´

üåü *Protecci√≥n contra n√∫meros √°rabes no deseados*

‚öôÔ∏è *Opciones de configuraci√≥n:*
‚Ä¢ ${usedPrefix}antiarabe activar
‚Ä¢ ${usedPrefix}antiarabe desactivar
‚Ä¢ ${usedPrefix}antiarabe estado
‚Ä¢ ${usedPrefix}antiarabe lista

üîç *Detecci√≥n autom√°tica:*
üìû C√≥digos de pa√≠s √°rabes
üî¢ Patrones num√©ricos √°rabes
üë§ Nombres de usuario √°rabes
üìõ Biograf√≠as con caracteres √°rabes

üö´ *Acciones:*
‚ö†Ô∏è Expulsi√≥n autom√°tica
üîí Bloqueo preventivo
üìä Registro de actividad
      `.trim(), m, ctxWarn)
    }

    // Sistema de estado persistente
    if (!global.antiArabStatus) global.antiArabStatus = {}
    if (!global.antiArabStatus[m.chat]) global.antiArabStatus[m.chat] = true

    // Lista de n√∫meros expulsados por grupo
    if (!global.arabExpelled) global.arabExpelled = {}
    if (!global.arabExpelled[m.chat]) global.arabExpelled[m.chat] = []

    switch (action) {
      case 'activar':
      case 'on':
      case 'enable':
        global.antiArabStatus[m.chat] = true
        await conn.reply(m.chat, 
          `‚úÖ *Anti-√Årabe Activado*\n\n` +
          `*Protecci√≥n m√°xima activada. Los n√∫meros √°rabes ser√°n expulsados autom√°ticamente.*\n\n` +
          `üõ°Ô∏è *Estado:* üü¢ ACTIVADO\n` +
          `üö´ *Modo:* Expulsi√≥n autom√°tica\n` +
          `üîç *Detecci√≥n:* C√≥digos + nombres + biograf√≠as\n` +
          `‚ú® *El grupo ahora est√° protegido contra n√∫meros √°rabes*`,
          m, ctxOk
        )
        break

      case 'desactivar':
      case 'off':
      case 'disable':
        global.antiArabStatus[m.chat] = false
        await conn.reply(m.chat, 
          `‚ùå *Anti-√Årabe Desactivado*\n\n` +
          `*He desactivado el sistema anti-√°rabe. Todos los n√∫meros son permitidos.*\n\n` +
          `üõ°Ô∏è *Estado:* üî¥ DESACTIVADO\n` +
          `üö´ *Modo:* Permisivo\n` +
          `‚ú® *Sistema de protecci√≥n desactivado*`,
          m, ctxWarn
        )
        break

      case 'estado':
      case 'status':
      case 'state':
        const status = global.antiArabStatus[m.chat] ? 'üü¢ ACTIVADO' : 'üî¥ DESACTIVADO'
        const expelledCount = global.arabExpelled[m.chat]?.length || 0
        await conn.reply(m.chat, 
          `üìä *Estado del Anti-√Årabe*\n\n` +
          `üõ°Ô∏è *Sistema:* ${status}\n` +
          `üö´ *Modo:* ${global.antiArabStatus[m.chat] ? 'EXPULSI√ìN AUTOM√ÅTICA' : 'PERMISIVO'}\n` +
          `üìà *Expulsados:* ${expelledCount} n√∫meros\n` +
          `üí¨ *Grupo:* ${await conn.getName(m.chat) || 'Sin nombre'}\n\n` +
          `‚ú® *Protecci√≥n ${global.antiArabStatus[m.chat] ? 'activa' : 'desactivada'}*`,
          m, ctxOk
        )
        break

      case 'lista':
      case 'list':
      case 'expulsados':
        const expelledList = global.arabExpelled[m.chat] || []
        if (expelledList.length === 0) {
          await conn.reply(m.chat, 'üìù *Lista de expulsados vac√≠a*\nNo se han expulsado n√∫meros √°rabes en este grupo.', m, ctxWarn)
        } else {
          let listText = `üìã *N√∫meros √Årabes Expulsados* (${expelledList.length})\n\n`
          expelledList.slice(-10).forEach((num, index) => {
            listText += `${index + 1}. ${num}\n`
          })
          if (expelledList.length > 10) {
            listText += `\n... y ${expelledList.length - 10} m√°s`
          }
          await conn.reply(m.chat, listText, m, ctxWarn)
        }
        break

      default:
        await conn.reply(m.chat, '‚ùå Opci√≥n no v√°lida. Usa: activar, desactivar, estado o lista', m, ctxErr)
    }
    return
  }
}

// ===== SISTEMA PRINCIPAL DE DETECCI√ìN ANTI-√ÅRABE =====

// C√≥digos de pa√≠s √°rabes
const arabCountryCodes = [
  '966', // Arabia Saudita
  '971', // UAE
  '973', // Bahrain
  '974', // Qatar
  '965', // Kuwait
  '968', // Oman
  '967', // Yemen
  '963', // Syria
  '962', // Jordan
  '961', // Lebanon
  '970', // Palestine
  '964', // Iraq
  '20',  // Egypt
  '212', // Morocco
  '213', // Algeria
  '216', // Tunisia
  '218', // Libya
  '249', // Sudan
  '9665', // Saudi mobile
  '96650', '96653', '96654', '96655', '96656', '96657', '96658', '96659'
]

// Caracteres √°rabes para detecci√≥n en nombres y biograf√≠as
const arabicChars = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/

// Nombres comunes √°rabes (en ingl√©s para detecci√≥n)
const arabicNames = [
  'mohamed', 'mohammad', 'mohammed', 'ahmed', 'ali', 'omar', 'youssef', 'khaled',
  'abdul', 'abdullah', 'ibrahim', 'hassan', 'hussein', 'mahmoud', 'mustafa', 'osama',
  'yasin', 'zakaria', 'fatima', 'aisha', 'zainab', 'mariam', 'laila', 'nour',
  'al', 'el', 'bin', 'bint', 'abu', 'um', 'al-', 'el-'
]

// Detectar participantes nuevos (cuando alguien se une)
handler.participantsUpdate = async function(participantsUpdate) {
  try {
    const { id, participants, action } = participantsUpdate
    const groupMetadata = await this.groupMetadata(id).catch(() => null)
    if (!groupMetadata) return

    // Verificar si el anti-√°rabe est√° activo en este grupo
    if (!global.antiArabStatus || global.antiArabStatus[id] === false) return

    // Inicializar lista de expulsados si no existe
    if (!global.arabExpelled) global.arabExpelled = {}
    if (!global.arabExpelled[id]) global.arabExpelled[id] = []

    for (const participant of participants) {
      if (action === 'add') {
        await checkAndRemoveArabUser(this, id, participant, groupMetadata)
      }
    }
  } catch (error) {
    console.error('‚ùå Error en participantsUpdate:', error)
  }
}

// Funci√≥n principal para detectar y expulsar usuarios √°rabes
async function checkAndRemoveArabUser(conn, groupId, userId, groupMetadata) {
  try {
    // Obtener informaci√≥n del usuario
    const userInfo = await conn.onWhatsApp(userId).catch(() => [null])
    const contact = await conn.getContact(userId).catch(() => {})
    
    const userNumber = userId.split('@')[0]
    const userName = contact?.name || contact?.notify || userNumber
    const userStatus = contact?.status || ''

    // 1. Detecci√≥n por c√≥digo de pa√≠s
    const isArabByCountryCode = arabCountryCodes.some(code => 
      userNumber.startsWith(code) || userNumber.includes(code)
    )

    // 2. Detecci√≥n por caracteres √°rabes en nombre
    const hasArabicName = arabicChars.test(userName)

    // 3. Detecci√≥n por nombres comunes √°rabes
    const hasArabicNamePattern = arabicNames.some(name => 
      userName.toLowerCase().includes(name)
    )

    // 4. Detecci√≥n por biograf√≠a (status)
    const hasArabicBio = arabicChars.test(userStatus)

    // Si cumple al menos 2 criterios, se considera usuario √°rabe
    const detectionCriteria = [
      isArabByCountryCode,
      hasArabicName,
      hasArabicNamePattern,
      hasArabicBio
    ].filter(Boolean).length

    const isArabUser = detectionCriteria >= 1

    if (isArabUser) {
      // Verificar si el bot es administrador
      const isBotAdmin = groupMetadata.participants.find(p => p.id === conn.user.jid)?.admin
      
      if (isBotAdmin) {
        // Expulsar al usuario
        await conn.groupParticipantsUpdate(groupId, [userId], 'remove')
        
        // Agregar a la lista de expulsados
        if (!global.arabExpelled[groupId].includes(userId)) {
          global.arabExpelled[groupId].push(userId)
          // Mantener solo los √∫ltimos 100 registros
          if (global.arabExpelled[groupId].length > 100) {
            global.arabExpelled[groupId] = global.arabExpelled[groupId].slice(-100)
          }
        }

        // Log detallado
        console.log(`üö´ USUARIO √ÅRABE EXPULSADO:
üë§ Usuario: ${userId}
üìõ Nombre: ${userName}
üìû N√∫mero: ${userNumber}
üìù Biograf√≠a: ${userStatus.substring(0, 50)}...
üí¨ Grupo: ${groupMetadata.subject}
üîç Detecci√≥n: 
  - C√≥digo pa√≠s: ${isArabByCountryCode}
  - Nombre √°rabe: ${hasArabicName}
  - Patr√≥n nombre: ${hasArabicNamePattern}
  - Biograf√≠a √°rabe: ${hasArabicBio}
üïí Hora: ${new Date().toLocaleString()}
        `)

        // Enviar notificaci√≥n al grupo (opcional)
        const detectionReasons = []
        if (isArabByCountryCode) detectionReasons.push('c√≥digo de pa√≠s √°rabe')
        if (hasArabicName) detectionReasons.push('nombre con caracteres √°rabes')
        if (hasArabicNamePattern) detectionReasons.push('patr√≥n de nombre √°rabe')
        if (hasArabicBio) detectionReasons.push('biograf√≠a con caracteres √°rabes')

        await conn.sendMessage(groupId, {
          text: `üö´ *Usuario √Årabe Detectado y Expulsado*\n\n` +
                `üë§ *Usuario:* @${userNumber}\n` +
                `üìõ *Nombre:* ${userName}\n` +
                `üîç *Razones:* ${detectionReasons.join(', ')}\n` +
                `üõ°Ô∏è *Protecci√≥n Anti-√Årabe Activada*`,
          mentions: [userId]
        })

      } else {
        console.log(`‚ö†Ô∏è Usuario √°rabe detectado pero el bot no es admin: ${userId}`)
      }
    }

  } catch (error) {
    console.error('‚ùå Error en checkAndRemoveArabUser:', error)
  }
}

// Tambi√©n verificar mensajes por si acaso
handler.before = async (m) => {
  if (m.isBaileys || !m.isGroup) return
  
  // Verificar si el anti-√°rabe est√° activo
  if (!global.antiArabStatus || global.antiArabStatus[m.chat] === false) return

  const sender = m.sender
  const groupMetadata = await m.getChat().catch(() => null)
  if (!groupMetadata) return

  // Verificar si el remitente es √°rabe
  await checkAndRemoveArabUser(this, m.chat, sender, groupMetadata)
}

handler.help = ['antiarabe <activar/desactivar/estado/lista>']
handler.tags = ['group']
handler.command = ['antiarabe', 'antiarab', 'antiarabes']
handler.group = true
handler.admin = true
handler.botAdmin = true

export default handler